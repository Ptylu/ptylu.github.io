[
  {
     "Theory-ID":"0",
     "Title":"Processes",
     "Type":"Forensic",
     "OS":"Windows",
     "Comment":"Child Process",
     "Location":"N/A",
     "Definition":"All process below are present in \"C:\\Windows\\System32\\\", except for System (No path because not generated by an image of an executable) and explorer.exe \"C:\\Windows\" -- SYSTEM: Responsible for most of the Ring 0 threads. The modules that are launched by the system.exe are mainly the drivers (.sys) as well as some DLLs for the kernel executable (ntoskrnl.exe). - Parent Process: N/A. - Instance Number: 1 (Boot). - User: Local System -- SMSS.EXE: Session Manager Process is responsible for creating new sessions. The first instance will then create the next children for each session. Smss.exe child will initialize the session by running csrss.exe (for all sessions) and wininit.exe (for session 0) or winlogon.exe (for session 1+). Finally the child instance smss.exe terminates. Session 0 = services, Session 1 = local console, Session 2+ = Remote Desktop or Fast User Switching (switching accounts without logging out or closing running applications) - Parent Process: System - Instance Number: 1 master instance (a few seconds after boot) then 1 child instance per session. The child instance ends after the creation of the new session - User: Local System -- CSRSS.EXE: Client /Server Run-Time Subsystem is the ring 3 process for the Windows subsystem. Role is to manage the processes / threads, import many DLL and facilitate the shutdown of the GUI when shutting down Windows - Prent Process: Created by smss.exe terminating instance (often no Parent Process Name during forensic analyse). - Instance Number:2 (session 0 & session 1 a few seconds after boot) or more. - User: Local System. -- WININIT.EXE: Starts important processes that will exist in the background (will use the wininit.ini file). Services.exe, lsass.exe or lsaiso.exe are launched by wininit.exe - Prent Process: Created by smss.exe terminating instance (often no Parent Process Name during forensic analyse). - Instance Number:1 (from session 0, a few seconds after boot). - User: Local System. -- WINLOGON.EXE: Handles interactive logon and logoff and launches logonUI.exe which retrieves the user's credentials to submit them to lsass.exe for validation. When user is authenticated, winlogon.exe loads NTUSER.DAT in HKCU and launches explorer.exe via userinit.exe - Prent Process:Created by smss.exe terminating instance (often no Parent Process Name during forensic analyse). - Instance Number: After boot for session 1, otherwise after creating an additional session. - User: Local System. -- SERVICES.EXE: Manages the Unified Background Process Manager (UBPM) which is responsible for background services and scheduled tasks. Also implements the Service Control Manager (SCM) which manages services and drivers tagged as auto-start. - Prent Process: WININIT.EXE. - Instance Number: 1. - Starting: After boot - User: Local System. -- SVCHOST.EXE: To launch DLLs, Windows launches a multitude of svchost.exe with a different -k parameter to group similar services. Parameter -k included DcomLaunch, RPCSS, LocalServiceNetworkRestricted, LocalServiceNoNetwork, LocalServiceAndNoImpersonation, netsvcs, NetworkService... Malware can use svchost.exe to launch a malicious DLL or rename a malicious process with this name. On Windows 10 if +3.5 GB ram, services.exe will not group processes anymore, so many more svchost.exe (50+) - Prent Process: Most often by services.exe - Instance Number: many (often >10). - Starting: Anytime - User: Local System, Network Service, Local Service Account or User. -- RUNTIMEBROKER.EXE: Proxy role between the Universal Windows Platform (UWP, or metro apps, allows developers to develop universal applications) and the Windows APIs. UWP have limited access to the hardware and the file system. Generally 1 RuntimeBroker.exe per UWP. For Example the launch of calculator.exe will generate the instanciation of a runtimeBroker.exe - Prent Process: Svchost.exe. - Instance Number: 1+. - Starting: Anytine. - User: Mostly User. -- LSASS.EXE: Allows the connection of the user by recovering the information in HKLM\\SYSTEM\\CurrentControl\\LSA. Lsass.exe also responsible for implementing security policy (password & audit policy) and writing events in the security.evtx. Must not have any child process (except rare exception like EFS) - Prent Process: Wininit.exe. - Instance Number: 1. - Starting: After boot. - User: Local System. -- LSAISO.EXE: Allows to split lsass.exe in 2 if Credential Guard is enabled. Accounts are stored in lsaiso.exe. Allows to have a virtualization to store the accounts on a dedicated instance. When a remote authentication is performed, lsass.exe sends a request with RPC to lsaiso.exe for authentication. - Prent Process: Wininit.exe. - Instance Number: 0 or 1 (If Cr√©dential Guard acyivated). - Starting: After boot. - User: Local System. -- TASKHOST.EXE: For windows task. Once initialized, taskhost.exe launches an infinite loop to capture events like schedule, user logon, system startup, idle CPU time, Windows log event, PC lock/unlock. More than 160 tasks are configured by default. - Prent Process: Svchost.exe. - Instance Number: 1+. - Starting: Anytime. - User: user or Local Service Account. -- EXPLORER.EXE: Allows user access to files and provides an interface for the Desktop, Start menu, Taskbar, shortcut... Can also be used with cmd.exe or powershell.exe. - Prent Process: Created by a userinit.exe instance that terminates (so often no parent process name during analysis). - Instance Number: 1+ (1 instance per connected user). Multiple instances per user if the option Launch folder windows in a separate process is activated. - Starting: When user is connected. - User: User connected.",
     "Forensic-Tool":"N/A",
     "Example":"THR-0-2022-09-13_13-53.png",
     "Ref":"https://alparslanakyildiz.medium.com/fundamental-windows-processes-6341696cf4f0"
   },
   {
      "Theory-ID":"1",
      "Title":"Prefetch",
      "Type":"Forensic",
      "OS":"Windows",
      "Comment":"N/A",
      "Location":"C:\\Windows\\Prefetch\\",
      "Definition":"Prefetch is used by Windows to accelerate .exe by saving .dll paths. Preftech file name is the executable name + executable path hash \"PING.EXE-B29F6629.pf\". 1 Prefetch file by executable (Exeption for svchost.exe & dllhost.exe). {IN} - Prefetch is not enabled by default on Windows server. To enable Prefetch, \"Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters\" set \"EnablePrefetcher\" to \"3\" - Even if executable crashs, a prefetch can be created - \"Creation Time\" can have 10s latency - Prefetch folder is limited to 128 Prefetch file for Windows 7 and 1024 Prefetch file for Windows 8-10. - Old Prefetch can be overwritten - Multiple svchost.exe & dllhost.exe Prefetch file because Prefetch uses the command for the Hash calculation{IN} {ID} - Attacker may set a 10s sleep to avoid the DLL's prefetch recording {ID} {IS} - If the prefetch is deleted from the folder, then recreated after the same binary is run, then the macB date remains the same as when it was first run. The MAcb dates will be those of the last launch of the binary {D}. {IS}",
      "Forensic-Tool":"PECMD.exe (https://github.com/EricZimmerman/PECmd) - Hot Analysis command example: \"PECmd.exe -f C:\\Windows\\Prefetch\\CMD.EXE-8E75B5BB.pf\" - Cold Analysis command example \"PECmd.exe -d C:\\Windows\\Prefetch\\ --csv dfir_out --csvf prefetch_to_analyse.csv --vss --mp -q\"",
      "Example":"{A} 1 prefetch file by .exe. Here prefetch for C:\\Windows\\SysWOW64\\ping.exe and C:\\Windows\\System32\\ping.exe. 2022-09-07_22-28.png #C:\\Windows\\SysWOW64\\ping.exe and C:\\Windows\\System32\\ping.exe# {B} Special Prefect behavior for svchost.exe & dllhost.exe. Prefetch uses the path+command to calculate the hash. 2022-09-07_22-34.png #dllhost.exe# 2022-09-07_22-39.png #svchost.exe# {C} With MAcB time, we can detect if executable has been launched for the first time (3 same dates) for \"PING.EXE-6B29C0CD.pf\" or has already been executed more than once (Date Created is not the same) for execution for \"PING.EXE-B29F6629.pf\" 2022-09-07_22-51.png #Only 1 execution for PING.EXE-B29F6629.pf# {D} Note Forensic: Below with the analysis of the Prefetch File, we can see the Executable has been launched only once, which is not possible because if it has been launched only once, the MAcB dates should be the same. This is an indicator of Prefetch File Deletion 2022-09-13_13-22.png #With the Creation Date analysis, we can see the Ping Preffetch File was deleted#",
      "Ref":"N/A"
   },
   {
     "Theory-ID":"2",
     "Title":"Dynamic-Link Library Search Order",
     "Type":"Forensic",
     "OS":"Windows",
     "Comment":"",
     "Definition":"Windows can contain several versions of a DLL. To use a DLL, an application must either set its full path or use its manifest. If neither of these methods is used, there are different ways to search for and load a DLL: - If the desired DLL is already loaded in the memory, then it will use it. - If the DLL is in the \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs\" list, the system uses the copy of this DLL. -- If DLL name is not in the Manifest, application doesn't contain the full path of the DLL, the DLL is not yet loaded in memory or is not in \"KnownDLLs\" registry key, windows will try to find the DLL by following this order: - The directory from which the application is loaded (example: where winword.exe is located) - The system directory, usually \"C:\\Windows\\System32\\\" (The GetSystemDirectory function is called to obtain this directory.) - The 16-bit system directory (There is no dedicated function to retrieve the path of this directory, but it is searched as well.) - The Windows directory. The GetWindowsDirector function is called to obtain this directory. - {M} The Current Directory {M} (example: where the word file opened is located) - The directories that are listed in the PATH environment variable. -- A malware can make a DLL hijacking by placing for example a malicious DLL in the directory of the original process or in the {M} Current Directory {M}. If \"HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode\" is set to \"0\", Windows will search the DLL name in this folder order - The directory from which the application is loaded - {M} The Current Directory {M} - The system directory, usually \"C:\\Windows\\System32\\\" (The GetSystemDirectory function is called to obtain this directory.) - The 16-bit system directory (There is no dedicated function to retrieve the path of this directory, but it is searched as well.) - The Windows directory. The GetWindowsDirector function is called to obtain this directory. - The directories that are listed in the PATH environment variable.",
     "Forensic-Tool":"N/A",
     "Example":"N/A",
     "Ref":"https://docs.microsoft.com/fr-fr/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN"
   },
   {
     "Theory-ID":"3",
     "Title":"MACB Time",
     "Type":"Forensic",
     "OS":"Windows",
     "Comment":"",
     "Definition":"Windows can contain several versions of a DLL. To use a DLL, an application must either set its full path or use its manifest. If neither of these methods is used, there are different ways to search for and load a DLL: - If the desired DLL is already loaded in the memory, then it will use it. - If the DLL is in the list of the KnownDLLs register, then the system uses the copy of this DLL. -- A malware can make a DLL hijacking by placing for example a malicious DLL in the directory of the original process or in the current directory. If \"HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode\" is set to \"0\", Windows will search the DLL name in this folder order - The directory from which the application is loaded - {M} The Current Directory {M} - The system directory, usually \"C:\\Windows\\System32\\\" (The GetSystemDirectory function is called to obtain this directory.) - The 16-bit system directory - There is no dedicated function to retrieve the path of this directory, but it is searched as well. - The Windows directory. The GetWindowsDirector function is called to obtain this directory. - The directories that are listed in the PATH environment variable.",
     "Forensic-Tool":"N/A",
     "Example":"N/A",
     "Ref":"https://docs.microsoft.com/fr-fr/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN,https://www.fortinet.com/blog/industry-trends/a-crash-course-in-dll-hijacking,https://blog.trendmicro.com/trendlabs-security-intelligence/zaccesssirefef-arrives-with-new-infection-technique/"
   },
   {
     "Theory-ID":"4",
     "Title":"Malware",
     "Type":"Malware",
     "OS":"All",
     "Comment":"Malware types, How to detect",
     "Definition":"{C1} Malware Definition {C1}-- Binder & Dropper: - Binder: Used by attacker to hide malicious code in a legitimate program to make it a Trojan. It will link the legitimate program, the Dropper and the Payload into one code. - Dropper: It is activated when the trojan is launched by the victim. It unzips, decompresses and stealthily launches the installation of the malicious code in parallel with the legitimate application. If the payload is not present in the code and is downloaded by the Dropper, then the Dropper is called a Downloader. {ID} - Trojan is not a malware, only a vehicle. To create a Trojan, attacker has to use a Binder and a Dropper. {ID} -- Virus: Self-replicating malicious code that spreads to other software on the same machine. Does not have the ability to spread from one machine to another (unlike Worm). To spread, the copy of an infected program must be executed on another machine. -- Worm : Spreads on the network via mail, p2p or a security vulnerability (e.g. SMB Bluekeep) -- Rootkit : Used to install itself on the machine with System privileges (Ring 0). It can then use its hook to protect itself from detection and protection: - Intercepts and modifies the file system response to hide files from the VA - Falsify logs related to its malicious activity. -- RAT : Allows the remote control of a machine. In 2 parts - Client : Program installed on the attacking machine - Server: Program installed on the victim machine. Contains a backdoor allowing to keep the listening on a port opened by this one -- Ransomware : -- Spyware : -- PUP (Potentially Unwanted Program) : Are not desired by the user, often 'not malicious' but contain advertisements or have a paid subscription system {C1} Infection Method {C1} --  USB (Virus) -- Network propagation (Worm) : Email, P2P, vulnerability -- Drive-by Compromise : Infection from a compromised website. Either it is downloaded by the victim thinking it is a legitimate software, or it's downloaded automatically via the detection of a security flaw in one of the browser components. It can use the Iframe to secretly load a malicious page. {C1} Detection {C1} -- Signature : Hash verification -- Heuristic Analysis : Determine statistically if the file is malicious by analyzing code snippets and actions. A score is assigned at the end of the analysis. If the score exceeds the acceptability threshold, the file is considered malicious. -- Sandbox Observation of behavior in a confined environment. {ID} Malware can use a sleep method or look for VM traces to not execute or execute only non-malicious code. {ID} -- JA3 & JA3S : MD5 hashes to fingerprint the TLS client Hello & Server Hello requests (both requests are unencrypted and follow the TLS handcheck). Allows to detect a malicious flow even if the IP of the C2 has changed and the traffic is encrypted. The Server Hello message depends on the parameters of the Hello Client message. - Client side JA3 algorithm concatenate the  \"TLSVersion,Ciphers,Extensions,EllipticCurves,EllipticCurvePointFormats\" decimal present in the TLS Hello Client request and hash them to generate 1 MD5 - Server side JA3S algorithm concatenate the \"TLSVersion,Cipher,Extensions\" decimal present in the TLS Server Hello request and hash them to generate 1 MD5.{IN} - Some beacon can use common libraries or OS sockets for communication like Python or Windows Socket. For exemple Cobalt Strike‚Äôs Beacon use a Windows socket to initiate TLS communication. By consequence the JA3 is the same for all application using these librairies. We have to compare the JA3 and the JA3S (from the C2) together to have overall view on a possible malicious communication. {IN} ",
     "Forensic-Tool":"N/A",
     "Example":"{C1} Detection {C1} -- JA3 & JA3S THR-4_JA3_JA3S.png #Example of JA3 and JA3S#",
     "Ref":"https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/"
   },
   {
     "Theory-ID":"5",
     "Title":"Encryption",
     "Type":"Encryption",
     "OS":"All",
     "Comment":"Symmetric (AES, Serpent, Blowfish, Twofish), Asymmetric (RSA), TLS (Transport Layer Security)",
     "Definition":"{C1} Symmetric {C1} Works with Block Cipher or Stream Cipher -- Block Cipher (Slow) : Block encryption (fixed size bit blocks (usually 64 or 128 bits): Divide the raw text into blocks to encrypt them. The size of the raw block is always the same as the encrypted output block. Different modes to encrypt in Block Cypher: ECB, CBC, CFB, OFB, CTR, GCM, and XTS. CBC is more commonly used, the result of each block is used to encrypt the next block. However, it doesn't allow the encryption of blocks in parallel. {IN} List of Block Cipher - AES (128 bits block) - Serpent (128 bits block) - Camellia (128 bits block) - Twofish (128 bits block) - Blowfish (64 bits block)  {IN} {ID} DES and 3DES are also Block Cypher but must not be utilized anymore because of their weakness {ID} -- Stream Cipher (Fast, 8 bits at a time) : Converts plaintext bit by bit. Often in the form of a pseudo-random number generator with an XOR operation between one bit at the input and one at the output of the generator. {IN} List of Stream Cipher - RC4 {IN} {C1} Asymmetric {C1} Works with public and private key {IN} List of Asymmetric - RSA {IN} {C1} TLS Transport Layer Security {C1} -- Uses Symetric and Asymmetric Encryption (Often DHE+RSA or RSA+AES (Session key)) -- 2 Phases (JA3 and JA3S work on these 2 phases). - Client Hello : Client sends to the server the crytographic suites it knows - Server Hello : The server chooses from this list the cryptographic suite it wishes to use, and sends it back to the client {IN} TLS works on TCP. Can be implemented on UDP (we call it DTLS) {IN}",
     "Forensic-Tool":"N/A",
     "Example":"{C1} TLS Transport Layer Security {C1} -- First, the client and the server must agree on a key that will be used to exchange data encrypted by a {M}symmetric encryption algorithm{M}. Can use : - Asymmetric : RSA - Key-Agreement : DH Diffie-Hellman, DHE Ephemeral Diffie-Hellman, ECDHE Elliptic curve Diffie‚ÄìHellman. The DHE and ECDHE algorithms ensure persistent confidentiality but do not allow to verify the identity of both parties. They must therefore be completed by an authentication step. THR-5_tls_key_exchange_2.png #Key exchange algorithm# -- Second, If DHE or ECDHE, we need another encryption step for the {M}authentication algorithm{M}. During the Ephemeral Diffie-Hellman key exchange, the server transmits a temporary public Diffie-Hellman key to the client. The RSA identification consists in signing this key with the server's RSA private key. This signature allows the client to verify the validity of the Diffie-Hellman public key sent by the server THR-5_tls_key_authentication_2.png #Authentication algorithm# -- Third, Symetric Encryption : Data encryption using a {M}symmetric encryption algorithm{M}. THR-5_tls_symetric.png #Symmetric encryption algorithm with the block cypher mode (GCM, CBC)# -- Last, message {M}authentication code HMAC{M}. The integrity of each packet is ensured by the verification of an HMAC. THR-5_tls_key_authentication_message_hmac.png #HMAC algorithm#",
     "Ref":"https://medium.com/@antoine.ansel/les-suites-cryptographiques-tls-dd871079af8a, https://medium.com/asecuritysite-when-bob-met-alice/forward-secrecy-and-ephemeral-keys-guarding-against-data-breaches-in-the-future-b709295c6e5a, https://tls.mbed.org/kb/cryptography/ephemeral-diffie-hellman, https://crypto.stackexchange.com/questions/58283/why-is-a-diffie-hellman-key-exchange-required-when-rsa-is-already-being-used-for, https://security.stackexchange.com/questions/120140/what-is-the difference-between-dh-and-dhe, https://www.thesslstore.com/blog/block-cipher-vs-stream-cipher/#:~:text=A%20block%20cipher%20breaks%20down,into%20ciphertext%20using%20key%20bits."
   },
   {
     "Theory-ID":"6",
     "Title":"Hash",
     "Type":"Hash",
     "OS":"All",
     "Comment":"SHA, MD5, other, test",
     "Definition":"",
     "Forensic-Tool":"N/A",
     "Example":"N/A",
     "Ref":""
   },
   {
     "Theory-ID":"7",
     "Title":"Kerberos",
     "Type":"Authentication",
     "OS":"Windows",
     "Comment":"TGT, TGS",
     "Definition":"{C1} TGT (Ticket to Get Tickets){C1} When user log on on his computer, his machine will send a TGT request (AS-REQ) to the KDC. The AS-REQ is sent with encrypted timestamp (with the user's NTlm hash), preventing against password-guessing attacks {ID} By default the KDC requires all accounts to use pre-authentication, but an option can be checked (in AD) to disable this pre-authentication (Do not require Kerberos preauthentication). {ID} {C1} TGS (Ticket-Granting Service) {C1}",
     "Forensic-Tool":"N/A",
     "Example":"THR-7_Kerberos_authentication.png #Kerberos TGT and TGS process#",
     "Ref":"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4768, https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4769, https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/bb742516(v=technet.10)?redirectedfrom=MSDN, https://rioasmara.com/2020/07/04/kerberoasting-as-req-pre-auth-vs-non-pre-auth/"
   }
]
