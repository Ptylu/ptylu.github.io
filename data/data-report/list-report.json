[
   {
      "Report-ID":"1",
      "Mitre Attack ID":"T1490",
      "Technique":"Inhibit System Recovery",
      "Mitre CAR ID":"CAR-2021-01-009",
      "Comment":"N/A"
   },
   {
      "Report-ID":"2",
      "Mitre Attack ID":"T1070.004",
      "Technique":"Indicator Removal on Host: File Deletion",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"3",
      "Mitre Attack ID":"T1518.001",
      "Technique":"Software Discovery: Security Software Discovery",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"4",
      "Mitre Attack ID":"T1562.001",
      "Technique":"Impair Defenses: Disable or Modify Tools",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"5",
      "Mitre Attack ID":"T1482",
      "Technique":"Domain Trust Discovery",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"6",
      "Mitre Attack ID":"T1069.002",
      "Technique":"Permission Groups Discovery: Domain Groups",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"7",
      "Mitre Attack ID":"T1426",
      "Technique":"System Information Discovery",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"8",
      "Mitre Attack ID":"T1124",
      "Technique":"System Time Discovery",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"9",
      "Mitre Attack ID":"T1564.001",
      "Technique":"Hide Artifacts: Hidden Files and Directories",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"10",
      "Mitre Attack ID":"T1201",
      "Technique":"Password Policy Discovery",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"11",
      "Mitre Attack ID":"N/A",
      "Technique":"Network Share Creation",
      "Mitre CAR ID":"N/A",
      "Comment":"Share Creation"
   },
   {
      "Report-ID":"12",
      "Mitre Attack ID":"T1098",
      "Technique":"Account Manipulation",
      "Mitre CAR ID":"N/A",
      "Comment":"Password modification"
   },
   {
      "Report-ID":"13",
      "Mitre Attack ID":"T1222.001",
      "Technique":"File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"14",
      "Mitre Attack ID":"T1036.005",
      "Technique":"Masquerading: Match Legitimate Name or Location",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"15",
      "Mitre Attack ID":"T1059",
      "Technique":"Command and Scripting Interpreter",
      "Comment":"UsageLogs File Creation",
      "Mitre CAR ID":"N/A",
      "Forensic":"Yes"
   },
   {
      "Report-ID":"16",
      "Mitre Attack ID":"N/A",
      "Technique":"Malicious Executable Creation",
      "Mitre CAR ID":"N/A",
      "Comment":"Malicious Executable Creation"
   },
   {
      "Report-ID":"17",
      "Mitre Attack ID":"T1053.005",
      "Technique":"Scheduled Task/Job: Scheduled Task",
      "Mitre CAR ID":"CAR-2021-12-001",
      "Comment":""
   },
   {
      "Report-ID":"18",
      "Mitre Attack ID":"T1547.001",
      "Technique":"Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
      "Mitre CAR ID":"CAR-2021-11-002, CAR-2021-12-002",
      "Comment":""
   },
   {
      "Report-ID":"19",
      "Mitre Attack ID":"N/A",
      "Technique":"Network query",
      "Mitre CAR ID":"N/A",
      "Comment":"Ping Query, DNS Query"
   },
   {
      "Report-ID":"20",
      "Mitre Attack ID":"T1112",
      "Technique":"Modify Registry",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"21",
      "Mitre Attack ID":"T1059.005",
      "Technique":"Command and Scripting Interpreter: Visual Basic",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"22",
      "Mitre Attack ID":"T1140",
      "Technique":"Deobfuscate Decode Files or Information",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"23",
      "Mitre Attack ID":"T1546.008",
      "Technique":"Event Triggered Execution: Accessibility Features",
      "Mitre CAR ID":"N/A",
      "Comment":"N/A"
   },
   {
      "Report-ID":"24",
      "Mitre Attack ID":"T1574.001",
      "Technique":"DLL Search Order Hijacking",
      "Mitre CAR ID":"CAR-2021-11-001",
      "Comment":"N/A"
   },
   {
      "Report-ID":"25",
      "Mitre Attack ID":"T1562.002",
      "Technique":"Disable Windows Event Logging",
      "Mitre CAR ID":"CAR-2022-03-001",
      "Comment":"Even if EventLog are disabled and re-enabled, actions launched during the log disabled will be logged when log are re-enabled (we do not lose the logs (even with a reboot), unless the time shift is exceeded).",
      "Definition":"-- {A} The first one is to create the Registry Key \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\MiniNt\". This action will not generate Security EventLog 4657 or Sysmon EventLog 13 because the value of the key remains empty. However, if an attacker uses powershell to perform this attack (and not cmd), a Security EventLog 4663 will be generated (but 4663 generates a lot of noise). -- {B} The second way is to disable the service EventLog (display name Windows Event Log). After disabed, attacker must reboot the system. The action of disabling or put in manual the service will modify the Registry Key value \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\start\", therefore Security EventLog 4657 or Sysmon EventLog 13 will be generated on the system. -- {C} The third way is linked with the second. By default, the EventLog service cannot be stopped. If an attacker tries to stop the service, this one will restart immediately. Why ? Because to stop completely, this service must stop others, one in particular called netprofm (display name Network List Service). This service remains running until it is disabled. So Attacker must either disable EventLog and after to stop it or disable netprofm and after stop EventLog. Only stopping the service (even as admin) will not have an effect on the EventLog service because of the link with netprofm. Security EventLog 1100 will log the stop of the EventLog service (but also generates a lot of noise because it will generate a log everytime the system shutdown). We can stop the service (with Stop-Service) only if we disable it with the commands Set-Service or sc config. Direct modification of the registry key using reg add, New-ItemProperty, Set-ItemProperty will disable the service only after system restart. -- {D} The fourth way is to use auditpol.exe  to modify the audit configuration and disable/modify important parameters that will lead to disable the creation of EventLog. -- {E} The fifth way is to modify the Registry Key value \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security\\file\" (or other kind of log) to modify the path where the EventLog are stocked. Importantly, with this technique, the EventViewer will use the value of the Registry Key \"file\" to know where to find the Log. Thus, using the EventViewer will always show the current event logs, but the old one will be stocked in another evtx. Also, the location of the file must be writable by the Event Log service and should only be accessible to administrators. Attacker can also decrease the maxsize value of the Log to force the system to rewrite on the older EventLog (but the minimum cannot be less than 1028 KB). As the Registry key is modified, Security EventLog 4657 or Sysmon EventLog 13 will be generated on the system. All of these attacks required administrative right. Attacks number three, four and five do not require a system reboot to be effective immediately. -- {F} One discovered during my LAB is a new way to disable Security EventLog without needing the administrator privilege (tested on Microsoft Windows [Version 10.0.17763.1935]). A non-admin user can modify the \"start\" value in the registry \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security\" to completely disable the Security EventLog. However the system reboot is required to take effect. After the reboot, a System Eventlog 22 is generated and the Security EventLog will be Completely Unavailable. Adversaries may also modified the \"start\" value in the registry \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System\" and \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application\" to disable all the EventLog and will be Partially Unavailable. Administrator privilege required. Adversaries may also modify the \"enabled\" values in \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}\" or value \"start\" in \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational\" and Sysmon EventLog will be Completely Unavailable. Administrator privilege required. -- {G} Attacker may use the powershell command \"Remove-EventLog -LogName Security\" to unregister source of events that are part of Windows (Application, Security…). This command deletes the security EventLog (which also generates EventId 1102) but the new Eventlogs are still recorded until the system is rebooted . After the System is rebooted, the Security log is unregistered and doesn’t log any new Eventlog. However logs generated between the command and the reboot are still available in the .evtx file (Partially Unavailable). {M}This command disables Logs (reboot required) AND deletes EventLogs (reboot NOT required). Attack also present in REP-26-D{M} {IN} We can define the result of the logs availability in 3 categories: - Completely Unavailable (lost after the configuration revert) - Partially Unavailable (available after the configuration revert (if log rewriting not done)) - Available in Other File (available in other location) {IN}",
      "Example":"{A} Because MiniNt key doesn't need value (empty key), the 4667 and 13 EventLog will not log the creation of the key. Hovewer, if attacker uses powershell for attack (ATT-25-002), EventLog 4663 will trigger during the creation (but 4663 generates lot of Event). Below screenshot of the ATT-25-002: 25-1-minint-powershell-4663.png #A caption for the above image.# {B} Will still log Event until reboot or Service: Stopped 25-2-set-service-powershell.png This action will modify the Registry Key: 25-4-registry-key-disable-service.png EventLog 7040 if use of 003: 25-2-set-service-powershell-log-7040.png {C} Stopping the Windows Event Log service is a little more special than most other services. If the Windows Event Log service is enabled (automatically or manually), the attacker must first disable the Network List service. Explanation: When the Windows Event Log service stops, it tries to stop the Network List service. By default, this Network List service cannot be stopped unless we disable this service. So, if the Network List Service is not disabled, it will always restart and therefore the Windows Event Log Service will not be able to stop. To summarize, the 2 processes that an attacker has to follow to stop the Windows Event Log Service are <br>- Disable the Windows Event Log Service (and then stop the Windows Event Log Service if attacker doesn't want to wait the machine reboot for the change to take effect). <br>- Disable the Network List Service and then stop the Windows Event Log Service (and also at the same time set as \"disable\" or \"manual\" the Windows Event Log Service to keep this change after the computer reboots): 25-3-stop-service-powershell.png The picture below shows the Network List service to disable BEFORE to stop the Windows Event Log service (if not disabled): 25-3_2-disable-network-list-service.png Windows warnings the user that the Network List service will be stopped (if not already stopped and disabled): 25-3_3-prompt-before-stop-service.png The warning doen't display the Network List service (because already stopped and disabled): 25-3_4-prompt-before-stop-service-list-service-stopped.png Picture of broken EventViewer after {B}+reboot or {B}+{C}: 25-3_1-stop-service-powershell-eventviewer-error.png EventLog 1100 after the EventLog Service correctly stopped: 25-3_5-eventlog-service-stopped-1100.png {D} EventLog for Process Creation Disabled 25-5_2modification-audit-configuration-process-creation-4719.png {E} Registry Modification. This log is stored in the old EventLog file (Security.evtx). the new file (Not-Important-Log.evtx) configured doesn't contain this log: 25-6-modification-evtx-registry-4657.png {F} During my LAB, I discovered a new way to disable Security EventLog without needing the administrator privilege (tested on Microsoft Windows [Version 10.0.17763.1935]). As we can see below, a non-admin user can modify the value \"start\" in the registry EventLog-Security to completely disable the Security EventLog. However the system reboot is required to take effect: 25-7-non-admin-start-0.png After the reboot, a System Eventlog 22 is raised and Security EventLog will be Completely Unavailable. (The event logging service encountered an error while initializing publishing resources for channel Security. If channel type is Analytic or Debug, then this could mean there was an error initializing logging resources as well): 25-7-autolloger-error-22.png Attack also tested on EventLog-Application, EventLog-System, EventLog-Microsoft-Windows-Sysmon-Operational and EventLog-Microsoft-Windows-Sysmon-Operational\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9} but these commands require administrator privilege: 25-7-complete-denied.png The modification of \"start\" value in EventLog-Application and EventLog-System will completely disable the EventLog-Security access but will be only Partially Unavailable. After the modification of one of these 2 Registry Keys and a reboot, we can see the EventLog service is not able to start anymore (even if service is not disabled): 25-7-service-cannot-start-system-start.png The modification of \"start\" value in EventLog-Microsoft-Windows-Sysmon-Operational and  and \"enable\" value in EventLog-Microsoft-Windows-Sysmon-Operational\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9} will completely disable the Sysmon log and will be Completely Unavailable. For the modification of EventLog-Microsoft-Windows-Sysmon-Operational, all the Sysmon EventLog are unavailable: 25-7-sysmon-start-error.png For the modification of EventLog-Microsoft-Windows-Sysmon-Operational\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}, an error EventLog 255 will be available in the Sysmon Log: 25-7-sysmon-enable-error.png. However, no other new Sysmon EventLog can be generated, only the old EventLog before the modification are still available. {G} Removing Security source with Remove-EventLog command: 25-G-Remove-EventLog.png #Command launched followed with ping to verify whether Eventlod are still recorded# After the command launched, Security EventLog has been cleared (EventId 1102 generated) but new EventLog are still logged en Security.evtx. 25-G-Remove-EventLog-log.png #Ping has been recorded# However, after the reboot, new EventLogs are not recorded anymore and the default access to Security Eventlog from EventViewer is not possible anymore 25-G-log-unavailable-eventviewer.png #Security EventLog unavailable with default configuration in Eventviewer# We can have access to logs between the command and the reboot when we open the security.evtx from Explorer 25-G-old-log-available.png #Security.evtx opened from exporer in C:\\Windows\\System32\\winevt\\logs\\#"
   },
   {
      "Report-ID":"26",
      "Mitre Attack ID":"T1070.001",
      "Technique":"Indicator Removal on Host: Clear Windows Event Logs",
      "Mitre CAR ID":"N/A",
      "Comment":"Possible malicious pattern",
      "Definition":"-- {A} Attacker may use \"wevtutil cl\" OR \"Clear-EventLog –LogName\" to delete eventlog. -- {B} Attackers may set the option of the sources of events with \"Limit-EventLog -LogName Security -OverflowAction DoNotOverwrite\" to not delete old Evenlog when the .evtx is full. By default the Security Log size is configured with the minimum value of 20 480KB (~23 000 EventLog). So if this option is enabled, all the new EventLogs will be automatically deleted. We can detect this behavior with the Security EventLog 1104. The new EventLog will be completely unavailable, even after the configuration is reset. -- {C} Attackers may delete .evtx with \"del C:\\Windows\\System32\\winevt\\logs\\Security.evtx\" or \"Remove-Item C:\\Windows\\System32\\winevt\\logs\\Security.evtx\" after having disabled and stopped the Eventlog service  (REP-25, Type Attack B and C). As the EventLog service is disabled and stopped, the .evtx files are no longer used by this service and can be deleted. The new EventLog will be Unavailable until the configuration is reset (Partially Unavailable).. -- {D} Attacker may use the powershell command \"Remove-EventLog -LogName Security\" to unregister source of events that are part of Windows (Application, Security…). This command deletes the security EventLog (which also generates EventId 1102) but the new Eventlogs are still recorded until the system is rebooted . After the System is rebooted, the Security log is unregistered and doesn’t log any new Eventlog. However logs generated between the command and the reboot are still available in the .evtx file (Partially Unavailable). {M}This command disables Logs (reboot required) AND deletes EventLogs (reboot NOT required). Attack also present in REP-25-G{M}. {IN} The parameter \"-MaximumSize\" of \"Limit-EventLog\" Powershell command seems to only increase the size of the .evtx (number must be a multiple of 64KB). During the tests, it was impossible to decrease the .evtx size (40960KB to 20480KB) -> \"Limit-EventLog -LogName Security -MaximumSize 20480KB\"{IN}",
      "Example":"{B} After the powershell command, Security.evtx didn't delete old events and therefore didn't record new events (because the Security.evtx was already full with 40960KB of records). 26-B-security-log-full-1104.png #When Log is full, Security EventID 1104 is generated# {C} On the below screenshot, I tried to delete the .evtx file. The action was rejected by the system because the file was used by another process. The workaround to perform this action was to launch before 2 others commands REP-25-B (disable Eventlog service) and REP-25-C (stop Eventlog service) 26-C-deletion-evtx.png #After the 2 commands, I was be able to delete the Security.evtx# {D} Removing Security source with Remove-EventLog command: 25-G-Remove-EventLog.png #Command launched followed with ping to verify whether Eventlod are still recorded# After the command launched, Security EventLog has been cleared (EventId 1102 generated) but new EventLog are still logged en Security.evtx. 25-G-Remove-EventLog-log.png #Ping has been recorded# However, after the reboot, new EventLogs are not recorded anymore and the default access to Security Eventlog from EventViewer is not possible anymore 25-G-log-unavailable-eventviewer.png"
   },
   {
      "Report-ID":"X",
      "Mitre Attack ID":"N/A",
      "Technique":"Possible malicious pattern",
      "Mitre CAR ID":"N/A",
      "Comment":"Possible malicious pattern",
      "Definition":"",
      "Example":""
   }
]
